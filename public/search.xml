<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用RxJava实现EventBus——RxBus（翻译）]]></title>
      <url>http://naughtboy.github.io/blog/%E4%BD%BF%E7%94%A8RxJava%E5%AE%9E%E7%8E%B0EventBus%E2%80%94%E2%80%94RxBus%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://nerds.weddingpartyapp.com/tech/2014/12/24/implementing-an-event-bus-with-rxjava-rxbus/" target="_blank" rel="external">http://nerds.weddingpartyapp.com/tech/2014/12/24/implementing-an-event-bus-with-rxjava-rxbus/</a></p>
</blockquote>
<p><strong>（译者注：文中的EventBus多指事件总线这种设计模式，而非<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external"><code>EventBus</code></a>这个具体的类库。） </strong></p>
<p>这一篇文章有三个部分:</p>
<ul>
<li>快速了解什么是EventBus</li>
<li>使用RxJava实现EventBus</li>
<li>对RxBus的一些想法</li>
</ul>
<a id="more"></a>
<p>“RxBus”不是一种类库。使用RxJava实现EventBus是非常简单的，而且不需要担心会让你的类库变大。</p>
<h2 id="第一部分：什么是Event-Bus"><a href="#第一部分：什么是Event-Bus" class="headerlink" title="第一部分：什么是Event Bus"></a>第一部分：什么是Event Bus</h2><p>让我们来讨论下两种相似的东西：观察者模式和Pub-Sub模式。<br>（译者注：Pub-Sub，即pubish-subscribe，发布-订阅）</p>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>这种模式的意思是：你的一个类或者主要对象（Observable）将一个相关的信息通知（Event）给其他所有感兴趣的类或对象（Observer）。</p>
<h3 id="Pub-Sub模式"><a href="#Pub-Sub模式" class="headerlink" title="Pub-Sub模式"></a>Pub-Sub模式</h3><p>该模式的目标和观察者模式的目的是一样的，即：你想让其它的一些类知道或了解到某些事件的发生。<br>观察者模式和Pub-Sub模式有一个重要的区别：Pub-Sub模式的关注点在于把广播发出去，而观察者模式并不在乎消息是发到哪里去了，只是在乎消息是否已经发出去了，换句话说，被观察者（ 或发布者）不需要知道谁是观察者（或订阅者）。</p>
<h3 id="为什么要匿名？"><a href="#为什么要匿名？" class="headerlink" title="为什么要匿名？"></a>为什么要匿名？</h3><p>计算机编程里面一个好词汇叫“解耦”。你应该在你的程序设计里面尽可能地保持低耦合度。<br>通常情况下，你希望发布者（Publisher）都能知道每一个需要通知的订阅者（ subscriber），这样才能在事件或者消息准备好了的时候准确通知到这些订阅者。当在EventBus 里面，发布者并不需要知道每一个需要通知的订阅者，这种独立性有助于解耦，因为发布者和订阅者不需要通过逻辑编码来建立它们的关系。<br>话句话说，在你编写代码的每一个地方尽量有意识地解耦。</p>
<h3 id="怎么匿名？"><a href="#怎么匿名？" class="headerlink" title="怎么匿名？"></a>怎么匿名？</h3><p>那么，在Pub-Sub模式里面自然就出现了这么一个问题：怎么实现发表者（publisher）和订阅者（ Subscriber）之间的匿名？一个简单的实现方法就是创建一个中间人（ middleman）并让这个中间人负责所有的通信。而EventBus就是中间人的一种。<br>在Android里面，通常使用两个EventBus的类库：Square 的<a href="http://square.github.io/otto/" target="_blank" rel="external"><code>Otto</code></a> 和 Green Robot 的<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external"><code>EventBus</code></a>。网上有大量的关于如何把它们应用到你的App里面的文章。</p>
<h2 id="使用RxJava实现EventBus"><a href="#使用RxJava实现EventBus" class="headerlink" title="使用RxJava实现EventBus"></a>使用RxJava实现EventBus</h2><p>我以前发表过一篇有关 <a href="https://github.com/kaushikgopal/RxJava-Android-Samples" target="_blank" rel="external">RxJava for Android</a>的文章,我会继续在那篇文章写完具体的实现。以下是实现中相关的一部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 这就是那个中间类</span><br><span class="line">public class RxBus &#123;</span><br><span class="line"></span><br><span class="line">    private final Subject&lt;Object, Object&gt; _bus = new SerializedSubject&lt;&gt;(PublishSubject.create());</span><br><span class="line"></span><br><span class="line"> public void send(Object o) &#123;</span><br><span class="line">        _bus.onNext(o);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    public Observable&lt;Object&gt; toObserverable() &#123;</span><br><span class="line">        return _bus;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在，你有了一个可以用的EventBus了。<br>下面是发送一个事件的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(R.id.btn_demo_rxbus_tap)</span><br><span class="line">public void onTapButtonClicked() &#123;</span><br><span class="line"></span><br><span class="line">    _rxBus.send(new TapEvent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是你在<code>fragment</code>、<code>services</code>等需要监听这些事件的地方的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 这个_rxBus 对象实例是那个发布事件的对象</span><br><span class="line">_rxBus.toObserverable().subscribe(new Action1&lt;Object&gt;() &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public void call(Object event) &#123;</span><br><span class="line">    if(event instanceof TapEvent) &#123;</span><br><span class="line">      _showTapText();</span><br><span class="line">    &#125;else if(event instanceof SomeOtherEvent) &#123;</span><br><span class="line">      _doSomethingElse();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在这个例子里，我们在顶部的绿色<code>fragment</code>发布了一个事件，并在通过总线在底部蓝色的<code>fragment</code>进行监听。</p>
<p><a href="http://nerds.weddingpartyapp.com/images/posts/rxbus_simple.gif" title="demo" target="_blank" rel="external"><img src="http://nerds.weddingpartyapp.com/images/posts/rxbus_simple.gif" alt="demo" title="demo"></a></p>
<h2 id="对RxBus的一些想法"><a href="#对RxBus的一些想法" class="headerlink" title="对RxBus的一些想法"></a>对RxBus的一些想法</h2><h3 id="Dead-Events（死亡事件：没有订阅者的事件）"><a href="#Dead-Events（死亡事件：没有订阅者的事件）" class="headerlink" title="Dead Events（死亡事件：没有订阅者的事件）"></a>Dead Events（死亡事件：没有订阅者的事件）</h3><p>有某些情况下，知道当前有没有观察者（Observers）在监听总线（Bus）是很有用的。比如，在你<a href="https://markhudnall.com/2013/11/13/gcm-foreground-and-background/" target="_blank" rel="external">用EventBus处理你的消息推送</a>，而且你不想App在前台的时候发送一个 push notification（推送通知），那么监听一个 <a href="https://github.com/square/otto/blob/master/otto/src/main/java/com/squareup/otto/DeadEvent.java" target="_blank" rel="external">Dead Event</a>就很重要了。<br>又比如我们最近发布的 Wedding Party（译者注：原文，目测是一款App），我们增加了“消息”的功能。如果用户打开App（至少有一个以上对bus的监听者），我们不会发送push notification。但如果App在后台的话，我们会发送一个能让他们知道聊天信息的push notification。要是一个事件被发送到Event Bus中，如果当前没有监听者，就会返回一个Dead Event。如果我们得到一个返回的Dead Event的话就会发送一个 Push Notification。<br>你该怎么用 RxBus实现Dead Event呢？<br>其实很简单，<code>Subject</code>类中有一个很有用的<code>hasObservers()</code>方法就可以实现了。这个方法是在<a href="https://github.com/ReactiveX/RxJava/pull/1802" target="_blank" rel="external">1.x的版本被加到RxJava</a>的，所以至少在当前最后的版本（0.23.0）的RxAndroid中可以找到这个方法。</p>
<h3 id="那么我应该使用RxBus而不是-Otto-Event-Bus-吗？"><a href="#那么我应该使用RxBus而不是-Otto-Event-Bus-吗？" class="headerlink" title="那么我应该使用RxBus而不是 Otto/Event Bus 吗？"></a>那么我应该使用RxBus而不是 Otto/Event Bus 吗？</h3><p>如果你只是先在你的Android App里面简单地应用Event Bus，你最好还是使用Otto（更推荐）或者<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">Event Bus</a>。Otto 拥有更加简洁的由注解驱动的Api，使用起来会更加地方便。<br>如果你熟悉Rx，而且已经在你的项目里面使用了RxJava，而且又想摆脱多余的库，那么你一定要试试RxBus。</p>
<blockquote>
<p>译者注：英文水平有限，恳请看到该文章的诸位帮忙校对下，看看哪里出错了。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rx系列学习笔记]]></title>
      <url>http://naughtboy.github.io/blog/Rx%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>闲来无事，填下很久以前就留下的坑，Rx系列也出来很久了，当直到现在才开始学习。暂时包括RxJava和RxAndroid。这篇文章主要记录在学习中的问题。</p>
<p>PS：如果文章有问题，麻烦指正。</p>
<a id="more"></a>
<h2 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h2><p>RxJava的Rx系列的基础，所以从这儿开始。<br>参考资料：<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></p>
<h3 id="RxJava和EventBus的区别和类比"><a href="#RxJava和EventBus的区别和类比" class="headerlink" title="RxJava和EventBus的区别和类比"></a>RxJava和EventBus的区别和类比</h3><p>由于之前学习使用过EventBus，所以学习的时候用EventBus进行对比，刚开始两种的观察者和订阅的概念有点混淆，在骚扰了Android Studio B群的 @Wesley.H 同学之后大概得到下面的类比：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//以下代码对比的对象都是EventBus</span><br><span class="line"></span><br><span class="line">//观察者，相当于接收器 onMainThread(Event event)</span><br><span class="line">      Observer observer=new Observer&lt;String&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onCompleted() &#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onError(Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onNext(String s) &#123;</span><br><span class="line">              LogUtil.e(&quot;onNext&quot;,s);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      //相当于一个即将Post的 Event</span><br><span class="line">      Observable observable=Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class="line">              subscriber.onNext(&quot;hello&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      //将事件post出去</span><br><span class="line">      observable.subscribe(observer);</span><br></pre></td></tr></table></figure></p>
<h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><p>变换的概念理解并使用起来并不困难，就是在发送数据之前先做N次（取决你调用了几次变换的方法）处理，再把处理的结果发送到目标点。难点在于变换的原理。</p>
<ul>
<li><code>map()</code>方法是最简单的变换。</li>
<li><code>flatMap()</code>是“嵌套”的<code>map()</code>————这是我个人的理解。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;).flatMap(new Func1&lt;String, Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Observable&lt;String&gt; call(final String s) &#123;</span><br><span class="line">                return Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class="line">                        subscriber.onNext(s+&quot;:map1&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void call(String s) &#123;</span><br><span class="line">                LogUtil.e(&quot;action&quot;,s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>控制台的输出信息是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">action: 1:map1</span><br><span class="line">action: 2:map1</span><br><span class="line">action: 3:map1</span><br></pre></td></tr></table></figure></p>
<p>说实话，*我对<code>flatMap()</code>和<code>map()</code>还是有点模糊，所以暂时留坑</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用hexo远程部署到Github搭建个人博客]]></title>
      <url>http://naughtboy.github.io/blog/%E5%88%A9%E7%94%A8hexo%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E5%88%B0Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="搭建准备工作"><a href="#搭建准备工作" class="headerlink" title="搭建准备工作"></a>搭建准备工作</h2><ul>
<li>搭建git环境，推荐<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="external">廖雪峰的git教程</a></li>
<li>安装Node.js，推荐<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">菜鸟教程关于Node.js部分</a></li>
<li>拥有一个<a href="https://github.com/" target="_blank" rel="external">Github账号</a></li>
</ul>
<a id="more"></a>
<h2 id="安装hexo并初始化"><a href="#安装hexo并初始化" class="headerlink" title="安装hexo并初始化"></a>安装hexo并初始化</h2><p>在想要建站的位置右键打开菜单选择 ‘Git Bash Here’，并输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli #安装指令</span><br></pre></td></tr></table></figure></p>
<p>在执行完安装指令之后继续执行以下初始化命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init .  #. 表示在当前文件夹执行初始化</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>hexo中最常用的是主题设置，其他还有网站相关属性、网站的设置、新文章的默认配置、分类、标签设置等</p>
<h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>修改<code>_config.yml</code> 中的<code>theme:</code>属性可修改主题样式。<br>推荐主题可阅读<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">来自知乎的hexo主题推荐</a><br>PS：当前blog使用的是 <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next</a></p>
<h3 id="生成标签页"><a href="#生成标签页" class="headerlink" title="生成标签页"></a>生成标签页</h3><p>新建一个名字为tags的页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure></p>
<p>在生成的页面的<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">Front-matter</a>加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br><span class="line">#如果有加上多说或者其他评论系统，请加上以下代码以在本页面关闭评论系统</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure></p>
<p>在添加完之后在主题配置文件的menu节点加上tags后重新部署即可完成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br></pre></td></tr></table></figure></p>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>可参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo的说明文档</a>进行配置</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>hexo可以部署到本地调试，也可以部署到远程服务器</p>
<h3 id="部署到本地"><a href="#部署到本地" class="headerlink" title="部署到本地"></a>部署到本地</h3><p>在执行完hexo的初始化之后可执行下面的命令运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>在执行完之后在浏览器输入地址<code>http://localhost:4000/</code>。</p>
<h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><h4 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h4><p>本机的ssh已加到Github上，<a href="http://blog.csdn.net/binyao02123202/article/details/20130891" target="_blank" rel="external">添加ssh教程</a>。</p>
<h4 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h4><p>在Github上新建一个项目（repository）并配置<code>_config.yml</code>文件的<code>deploy:</code>属性</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Deployment</span></span><br><span class="line"><span class="comment">### Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: <span class="comment">##这里为项目的Git地址</span></span><br><span class="line">  branch: gh-pages <span class="comment">##要部署到的项目的分支(branch)</span></span><br></pre></td></tr></table></figure>
<p>在配置完成之后执行以下命令运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>完成后在浏览器输入<code>_config.yml</code>中配置的<code>url:</code>即可打开个人博客</p>
<h2 id="F-amp-Q"><a href="#F-amp-Q" class="headerlink" title="F&amp;Q"></a>F&amp;Q</h2><ul>
<li><p>F：为什么在本地上部署成功，而远程部署到Github时会出现没有格式的情况？<br>Q：必须在<code>_config.yml</code>中设置对应的<code>url:</code>和<code>root:</code>属性，其中<code>url:</code>必须为完整的网站地址，<code>root:</code>网站除去站点地址后面的那一部分，比如：我的blog设置为 <code>url: http://naughtboy.github.io/blog/ root: /blog/</code></p>
</li>
<li><p>F：怎么不让在首页的时候整篇文章都显示出来？<br>Q：文章截断，在需要截断的地方插入 <code>&lt;!--more--&gt;</code></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://naughtboy.github.io/blog/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
